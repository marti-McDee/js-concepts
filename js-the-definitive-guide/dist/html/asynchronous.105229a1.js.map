{"mappings":"AAAA,+CAA+C,CAE/C,sHAAsH;AACtH,oCAAoC;AAEpC,oDAAoD,CAEpD,YAAY,CAEZ,8CAA8C;AAC9C,UAAU,CACR,CAAA,SAAS,GAAI;AACX,yCAAyC;CAC1C,EACD,IAAI,EACJ,OAAO,CACR;AAED,qFAAqF;AACrF,SAAS,WAAW,CAAC,SAAS,EAAE;AAC9B,yCAAyC;CAC1C;AAED,0CAA0C;AAE1C,iFAAiF;AACjF,SAAS,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE;IAC7B,MAAM,KAAK,GAAG,WAAW,CAAC,IAAM;QAC9B,uBAAuB;QACvB,IAAI,KAAK,GAAG,GAAG,EACb,aAAa,CAAC,KAAK,CAAC;KAEvB,EAAE,IAAI,CAAC;CACT;AAED,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;AAEhB,SAAS,KAAK,GAAG;AACf,wBAAwB;CACzB;AACD,SAAS,MAAM,GAAG;AAChB,yBAAyB;CAC1B;AACD,SAAS,KAAK,GAAG;AACf,wBAAwB;CACzB;AACD,KAAK,EAAE;AACP,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,+BAA+B;;AACxD,KAAK,EAAE;AACP,UAAU;AACV,QAAQ;AACR,QAAQ;AACR,SAAS;AAET,YAAY,CACZ,IAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC;AAC7C,MAAM,CAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC;AACjD,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,WAAY;IAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;CAC5B,CAAC;AAEF,oBAAoB,CACpB,MAAM,OAAO,GAAG,IAAI,cAAc,EAAE;AAEpC,+BAA+B;AAC/B,MAAM,OAAO,GAAG,SACd,QAAQ,CAAC,+BAA+B;AAAhC,EACR;IACA,IAAI,OAAO,GAAG,IAAI,cAAc,EAAE;IAClC,OAAO,CAAC,kBAAkB,GAAG,WAAY;QACvC,IAAI,OAAO,CAAC,UAAU,IAAI,CAAC,IAAI,OAAO,CAAC,MAAM,IAAI,GAAG,EAClD,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,wBAAwB;;KAE1D;IACD,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,2CAA2C,EAAE,EAAE,CAAC,CAAC,CAAC;IACvE,OAAO,CAAC,IAAI,EAAE;CACf;AAED,SAAS,EAAE,CAAC,IAAI,EAAE;IAChB,CAAC,CAAC,SAAS,GAAG,IAAI;CACnB;AAED,MAAM,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC;AAClD,KAAK,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAA,CAAC,GAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAEvD,kCAAkC","sources":["src/js/chapters/asynchronous.js"],"sourcesContent":["/***  Chapter 13: Asynchronous JavaScript  ***/\n\n// Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests\n// without blocking the main thread.\n\n/** 13.1 Asynchronous Programming with Callbacks **/\n\n/* Timers */\n\n// display name in the console after 4 seconds\nsetTimeout(\n  firstName => {\n    // console.log(`My name is ${firstName}`)\n  },\n  4000,\n  'David'\n)\n\n// this time name is displayed every second and the function is passed as a reference\nfunction displayName(firstName) {\n  // console.log(`My name is ${firstName}`)\n}\n\n// setInterval(displayName, 1000, 'David')\n\n// console.log a countdown from 10, with a space of 1 second between each number.\nfunction countDown(start, end) {\n  const timer = setInterval(() => {\n    // console.log(start--)\n    if (start < end) {\n      clearInterval(timer)\n    }\n  }, 1000)\n}\n\ncountDown(10, 0)\n\nfunction first() {\n  // console.log('first');\n}\nfunction second() {\n  // console.log('second');\n}\nfunction third() {\n  // console.log('third');\n}\nfirst()\nsetTimeout(second, 1000) // Invoke `second` after 1000ms\nthird()\n// Output:\n// first\n// third\n// second\n\n/* Events */\nlet okay = document.getElementById('confirm')\nconst p = document.getElementById('my-paragraph')\nokay.addEventListener('pointerdown', function () {\n  console.log(this.innerHTML)\n})\n\n/* Network Events */\nconst request = new XMLHttpRequest()\n\n// send GET request to test API\nconst getText = function (\n  callback // How can I use this callback?\n) {\n  var request = new XMLHttpRequest()\n  request.onreadystatechange = function () {\n    if (request.readyState == 4 && request.status == 200) {\n      callback(request.responseText) // Another callback here\n    }\n  }\n  const id = Math.floor(Math.random() * 5 + 1)\n  request.open('GET', `https://jsonplaceholder.typicode.com/users/${id}`)\n  request.send()\n}\n\nfunction cb(data) {\n  p.innerText = data\n}\n\nconst inner = document.getElementById('inner-box')\ninner.addEventListener('pointerover', _ => getText(cb))\n\n/* Callbacks and Events in Node */\n"],"names":[],"version":3,"file":"asynchronous.105229a1.js.map","sourceRoot":"/__parcel_source_root/"}