{"mappings":"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","sources":["src/js/chapters/types_values_variables.js"],"sourcesContent":["/***  Chapter 3: Types, Values, and Variables ***/\n\n/** Overview and Definitions **/\n\n/* Map object */\nlet zoo = new Map()\n\nzoo.set('Zebras', 5)\nzoo.set('Gorillas', 2)\nzoo.set('Monkeys', 75)\n\nlet zebraCount = zoo.get('Zebras')\n\nfor (let [key, value] of zoo) {\n  console.log(`${key} : ${value}`)\n}\n\n/** Numbers **/\n\n/* Primitive coercion to object */\nlet num = 5\nlet temp = new Number(num)\nconsole.log(typeof temp.toString())\ntemp = {}\nnum = '5'\n\n/* Arithmetic in JavaScript */\nconst exponent = Math.pow(2, 3)\nconst round = Math.round(0.6)\nconst ceil = Math.ceil(0.6)\nconst floor = Math.floor(0.6)\nconst trunc = Math.trunc(0.6987897)\nconst abs = Math.abs(-5)\nconst max = Math.max(4, 5, 12, 3, 1)\nconst min = Math.min(4, 5, 12, 3, 1)\nconst rand = () => Math.floor(Math.random() * 100 + 1)\nconst pi = Math.PI\nconst e = Math.E\nconst sqrt = Math.sqrt(3)\nconst cubert = Math.cbrt(27)\nconst fourthRoot = Math.pow(81, 1 / 4)\nconst log = Math.log(10) // natural log of 10\nconst log10 = Math.log10(100) // base 10 log of 100\nconst Ecubed = Math.exp(3)\n\nlet ans = 0\n\nisNaN(undefined) // true\nisNaN({}) // true\nisNaN(Infinity) // false\nisNaN(NaN) // true\nisNaN(0) // false\n\nans = 0\nNumber.isNaN(undefined) // false\nNumber.isNaN({}) // false\nNumber.isNaN(Infinity) // false\nNumber.isNaN(NaN) // true\nNumber.isNaN(0) // false\n\nfunction checkIsNaN(arr) {\n  for (x in arr) {\n    console.info(arr[x] !== arr[x])\n  }\n}\n\ncheckIsNaN([undefined, {}, Infinity, NaN, 0])\n\n/* Binary Floating-Point and Rounding Errors */\nconst float = 0.1 + 0.2\nconst float2 = 1 / 10\n\n/* Arbitrary Precision Integers with BigInt */\nlet bigMath = 1000000000000000n * 1000000000000n // 10^27\n\nlet bigInt = BigInt(Number.MAX_SAFE_INTEGER)\n\nlet str = '1' + '0'.repeat(100)\nstr = BigInt(str)\n\n// comparison operators allow for mixed operad types\nconsole.log(1 < 2n, 2 > 1n, 0 == 0n, 0 === 0n)\n\n// none of the Math functions accept BigInt operands\nconsole\n  .log\n  // Math.floor(Math.random() * 4n - 2n) // Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions\n  ()\n\n/* Dates and Times */\nlet timestamp = Date.now() // current time as the number of seconds that have passed since the Unix Epoch (Jan 1 1970)\n// console.log(timestamp)\nlet now = new Date()\n// console.log(now)\nlet ms = now.getTime()\n// console.log(ms)\nlet iso = now.toISOString()\n// console.log(iso)\n\n/** Text **/\n\n/* String Literals */\nconst me = {\n  first: 'Big',\n  last: 'Bird',\n  age: '52',\n  address: '123 Sesame Street'\n}\n\nconsole.log(`${me.first} ${me.last} is ${me.age} years old and lives at ${me.address}`)\n\nconst literal = `This is a very, very, very, very, very, very, very, very, very, very, \\\nvery, very, very, very, very, very, very, very, very, very, very, very, very, very,\nvery, very, very, very, very long string literal \\u{1f35c}`\nconsole.log(literal)\n\n/* Escape Sequences in String Literals */\nfor (let i = 0; i < 7; i++) {\n  console.log(`${i + 1}. Walkthrough of the for-loop\\r`) // carriage return yields same result as newline\n}\nfor (let i = 0; i < 7; i++) {\n  console.log(`${i + 1}. Walkthrough of the for-loop\\n`)\n}\n\n/* Working with Strings */\nlet s = 'Hello, world!'\nconsole.log(s.substring(1, 4), s.slice(7, -1), s.slice(-6), s.split(', '))\n"],"names":[],"version":3,"file":"types_values_variables.7c767017.js.map","sourceRoot":"/__parcel_source_root/"}